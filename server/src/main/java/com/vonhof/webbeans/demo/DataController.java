package com.vonhof.webbeans.demo;

import com.vonhof.babelshark.annotation.Ignore;
import com.vonhof.babelshark.annotation.Name;
import com.vonhof.webi.HttpMethod;
import com.vonhof.webi.annotation.Body;
import com.vonhof.webi.annotation.Parm;
import com.vonhof.webi.annotation.Path;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import org.hsqldb.server.Server;

@Path("data")
public class DataController {
    private static final Server server = new Server();
    static {
        server.setNoSystemExit(true);
    }
    
    private final Connection conn;
    public DataController() throws SQLException {
        conn = DriverManager.getConnection("jdbc:hsqldb:mem:webbeans", "SA", "");
        init();
    }
    
    @Ignore
    public final void init() throws SQLException {
        PreparedStatement stmt = conn.prepareStatement(
                "CREATE MEMORY TABLE entries("
                    + "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                    + "name VARCHAR_IGNORECASE(65) NOT NULL,"
                    + "description LONGVARCHAR NOT NULL,"
                    + "created DATETIME DEFAULT NOW NOT NULL,"
                    + "tags LONGVARCHAR)");
        stmt.execute();
    }
    
    @Path(value="add",method= HttpMethod.POST)
    public DbEntry add(@Body DbEntry dbEntry) throws SQLException {
        PreparedStatement stmt = conn.prepareStatement(
                "INSERT INTO entries (name,description,tags) VALUES (?,?,?)",
                Statement.RETURN_GENERATED_KEYS);
        stmt.setString(1,dbEntry.getName());
        stmt.setString(2,dbEntry.getDescription());
        stmt.setString(3,dbEntry.getTags());
        
        if (stmt.executeUpdate() > 0) {
            ResultSet result = stmt.getGeneratedKeys();
            if (result.next()) {
                dbEntry.setId(result.getInt(1));
            }
        }
        return get(dbEntry.getId());
    }
    @Path(value="update",method= HttpMethod.POST)
    public DbEntry update(@Body DbEntry dbEntry) throws SQLException {
        PreparedStatement stmt = conn.prepareStatement(
                "UPDATE entries SET name=?,description=?,tags=? where id = ?",
                new String[]{"id"});
        stmt.setString(1,dbEntry.getName());
        stmt.setString(2,dbEntry.getDescription());
        stmt.setString(3,dbEntry.getTags());
        stmt.setInt(4,dbEntry.getId());
        stmt.execute();
        
        return get(dbEntry.getId());
    }
    
    @Path(value="get")
    public DbEntry get(@Parm(required=true) int id) throws SQLException {
        PreparedStatement stmt = conn.prepareStatement("SELECT * from entries where id = ?");
        stmt.setInt(1, id);
        ResultSet result = stmt.executeQuery();
        if (result.next()) {
            DbEntry out = new DbEntry();
            out.setId(result.getInt("id"));
            out.setName(result.getString("name"));
            out.setDescription(result.getString("description"));
            out.setTags(result.getString("tags"));
            out.setCreated(result.getTimestamp("created"));
            return out;
        }
        return null;
    }
    
    @Path(value="delete")
    public void delete(@Parm(required=true) int id) throws SQLException {
        PreparedStatement stmt = conn.prepareStatement(
                "DELETE FROM entries where id = ?");
        stmt.setInt(1,id);
        stmt.execute();
    }
    
    @Path(value="list")
    public List<DbEntry> list() throws SQLException {
        List<DbEntry> out = new ArrayList<DbEntry>();
        PreparedStatement stmt = conn.prepareStatement("SELECT * from entries");
        ResultSet result = stmt.executeQuery();
        while (result.next()) {
            DbEntry entry = new DbEntry();
            entry.setId(result.getInt("id"));
            entry.setName(result.getString("name"));
            entry.setDescription(result.getString("description"));
            entry.setTags(result.getString("tags"));
            entry.setCreated(result.getTimestamp("created"));
            out.add(entry);
        }

        return out;
    }
    
    @Name("entry")
    public static class DbEntry {
        private int id;
        private String name;
        private String description;
        private Timestamp created;
        private String tags;

        public Timestamp getCreated() {
            return created;
        }

        public void setCreated(Timestamp created) {
            this.created = created;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getTags() {
            return tags;
        }

        public void setTags(String tags) {
            this.tags = tags;
        }
    }
    
    
    
    
}
